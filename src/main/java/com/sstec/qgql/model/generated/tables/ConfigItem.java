/*
 * This file is generated by jOOQ.
 */
package com.sstec.qgql.model.generated.tables;


import com.sstec.qgql.model.generated.Keys;
import com.sstec.qgql.model.generated.Public;
import com.sstec.qgql.model.generated.tables.records.ConfigItemRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConfigItem extends TableImpl<ConfigItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.config_item</code>
     */
    public static final ConfigItem CONFIG_ITEM = new ConfigItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConfigItemRecord> getRecordType() {
        return ConfigItemRecord.class;
    }

    /**
     * The column <code>public.config_item.id</code>.
     */
    public final TableField<ConfigItemRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.config_item.config_id</code>.
     */
    public final TableField<ConfigItemRecord, Long> CONFIG_ID = createField(DSL.name("config_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.config_item.config_key</code>.
     */
    public final TableField<ConfigItemRecord, String> CONFIG_KEY = createField(DSL.name("config_key"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.config_item.config_value</code>.
     */
    public final TableField<ConfigItemRecord, String> CONFIG_VALUE = createField(DSL.name("config_value"), SQLDataType.VARCHAR(255), this, "");

    private ConfigItem(Name alias, Table<ConfigItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private ConfigItem(Name alias, Table<ConfigItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.config_item</code> table reference
     */
    public ConfigItem(String alias) {
        this(DSL.name(alias), CONFIG_ITEM);
    }

    /**
     * Create an aliased <code>public.config_item</code> table reference
     */
    public ConfigItem(Name alias) {
        this(alias, CONFIG_ITEM);
    }

    /**
     * Create a <code>public.config_item</code> table reference
     */
    public ConfigItem() {
        this(DSL.name("config_item"), null);
    }

    public <O extends Record> ConfigItem(Table<O> child, ForeignKey<O, ConfigItemRecord> key) {
        super(child, key, CONFIG_ITEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ConfigItemRecord, Integer> getIdentity() {
        return (Identity<ConfigItemRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ConfigItemRecord> getPrimaryKey() {
        return Keys.CONFIG_ITEM_PKEY;
    }

    @Override
    public List<ForeignKey<ConfigItemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONFIG_ITEM__FK8UGL4NG70Y2CBC3926PU0H9HW);
    }

    private transient Config _config;

    /**
     * Get the implicit join path to the <code>public.config</code> table.
     */
    public Config config() {
        if (_config == null)
            _config = new Config(this, Keys.CONFIG_ITEM__FK8UGL4NG70Y2CBC3926PU0H9HW);

        return _config;
    }

    @Override
    public ConfigItem as(String alias) {
        return new ConfigItem(DSL.name(alias), this);
    }

    @Override
    public ConfigItem as(Name alias) {
        return new ConfigItem(alias, this);
    }

    @Override
    public ConfigItem as(Table<?> alias) {
        return new ConfigItem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ConfigItem rename(String name) {
        return new ConfigItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ConfigItem rename(Name name) {
        return new ConfigItem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ConfigItem rename(Table<?> name) {
        return new ConfigItem(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Long, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
