/*
 * This file is generated by jOOQ.
 */
package com.sstec.qgql.model.generated.tables;


import com.sstec.qgql.model.generated.Keys;
import com.sstec.qgql.model.generated.Public;
import com.sstec.qgql.model.generated.tables.records.BeneficiaryRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Beneficiary extends TableImpl<BeneficiaryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.beneficiary</code>
     */
    public static final Beneficiary BENEFICIARY = new Beneficiary();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BeneficiaryRecord> getRecordType() {
        return BeneficiaryRecord.class;
    }

    /**
     * The column <code>public.beneficiary.id</code>.
     */
    public final TableField<BeneficiaryRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.beneficiary.application_id</code>.
     */
    public final TableField<BeneficiaryRecord, Long> APPLICATION_ID = createField(DSL.name("application_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.beneficiary.first_name</code>.
     */
    public final TableField<BeneficiaryRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.beneficiary.last_name</code>.
     */
    public final TableField<BeneficiaryRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.beneficiary.age</code>.
     */
    public final TableField<BeneficiaryRecord, String> AGE = createField(DSL.name("age"), SQLDataType.VARCHAR(255), this, "");

    private Beneficiary(Name alias, Table<BeneficiaryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Beneficiary(Name alias, Table<BeneficiaryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.beneficiary</code> table reference
     */
    public Beneficiary(String alias) {
        this(DSL.name(alias), BENEFICIARY);
    }

    /**
     * Create an aliased <code>public.beneficiary</code> table reference
     */
    public Beneficiary(Name alias) {
        this(alias, BENEFICIARY);
    }

    /**
     * Create a <code>public.beneficiary</code> table reference
     */
    public Beneficiary() {
        this(DSL.name("beneficiary"), null);
    }

    public <O extends Record> Beneficiary(Table<O> child, ForeignKey<O, BeneficiaryRecord> key) {
        super(child, key, BENEFICIARY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<BeneficiaryRecord, Integer> getIdentity() {
        return (Identity<BeneficiaryRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BeneficiaryRecord> getPrimaryKey() {
        return Keys.BENEFICIARY_PKEY;
    }

    @Override
    public List<ForeignKey<BeneficiaryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BENEFICIARY__FK8UGL4NG70Y2CBC3926PU0H9HW);
    }

    private transient Application _application;

    /**
     * Get the implicit join path to the <code>public.application</code> table.
     */
    public Application application() {
        if (_application == null)
            _application = new Application(this, Keys.BENEFICIARY__FK8UGL4NG70Y2CBC3926PU0H9HW);

        return _application;
    }

    @Override
    public Beneficiary as(String alias) {
        return new Beneficiary(DSL.name(alias), this);
    }

    @Override
    public Beneficiary as(Name alias) {
        return new Beneficiary(alias, this);
    }

    @Override
    public Beneficiary as(Table<?> alias) {
        return new Beneficiary(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Beneficiary rename(String name) {
        return new Beneficiary(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Beneficiary rename(Name name) {
        return new Beneficiary(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Beneficiary rename(Table<?> name) {
        return new Beneficiary(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Long, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Long, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Long, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
