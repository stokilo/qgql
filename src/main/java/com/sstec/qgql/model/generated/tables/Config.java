/*
 * This file is generated by jOOQ.
 */
package com.sstec.qgql.model.generated.tables;


import com.sstec.qgql.model.generated.Keys;
import com.sstec.qgql.model.generated.Public;
import com.sstec.qgql.model.generated.tables.records.ConfigRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Config extends TableImpl<ConfigRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.config</code>
     */
    public static final Config CONFIG = new Config();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConfigRecord> getRecordType() {
        return ConfigRecord.class;
    }

    /**
     * The column <code>public.config.id</code>.
     */
    public final TableField<ConfigRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.config.config_name</code>.
     */
    public final TableField<ConfigRecord, String> CONFIG_NAME = createField(DSL.name("config_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.config.contribution</code>.
     */
    public final TableField<ConfigRecord, String> CONTRIBUTION = createField(DSL.name("contribution"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.config.frequency</code>.
     */
    public final TableField<ConfigRecord, String> FREQUENCY = createField(DSL.name("frequency"), SQLDataType.VARCHAR(255), this, "");

    private Config(Name alias, Table<ConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private Config(Name alias, Table<ConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.config</code> table reference
     */
    public Config(String alias) {
        this(DSL.name(alias), CONFIG);
    }

    /**
     * Create an aliased <code>public.config</code> table reference
     */
    public Config(Name alias) {
        this(alias, CONFIG);
    }

    /**
     * Create a <code>public.config</code> table reference
     */
    public Config() {
        this(DSL.name("config"), null);
    }

    public <O extends Record> Config(Table<O> child, ForeignKey<O, ConfigRecord> key) {
        super(child, key, CONFIG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ConfigRecord, Integer> getIdentity() {
        return (Identity<ConfigRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ConfigRecord> getPrimaryKey() {
        return Keys.CONFIG_PKEY;
    }

    @Override
    public Config as(String alias) {
        return new Config(DSL.name(alias), this);
    }

    @Override
    public Config as(Name alias) {
        return new Config(alias, this);
    }

    @Override
    public Config as(Table<?> alias) {
        return new Config(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Config rename(String name) {
        return new Config(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Config rename(Name name) {
        return new Config(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Config rename(Table<?> name) {
        return new Config(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
