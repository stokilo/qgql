/**
 * Generated by orval v6.14.3 üç∫
 * Do not edit manually.
 * qgql API
 * OpenAPI spec version: 1.0.0-SNAPSHOT
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import { useQuery } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type { Order } from "../api.schemas";

export const getOrders = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Order[]>> => {
  return axios.get(`/orders`, options);
};

export const getGetOrdersQueryKey = () => [`/orders`] as const;

export const getGetOrdersQueryOptions = <
  TData = Awaited<ReturnType<typeof getOrders>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOrdersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrders>>> = ({
    signal,
  }) => getOrders({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type GetOrdersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOrders>>
>;
export type GetOrdersQueryError = AxiosError<unknown>;

export const useGetOrders = <
  TData = Awaited<ReturnType<typeof getOrders>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetOrdersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
