/**
 * Generated by orval v6.14.3 üç∫
 * Do not edit manually.
 * qgql API
 * OpenAPI spec version: 1.0.0-SNAPSHOT
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type { Order } from "../api.schemas";

export const getOrders = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Order[]>> => {
  return axios.get(`/orders`, options);
};

export const getGetOrdersQueryKey = () => [`/orders`] as const;

export const getGetOrdersQueryOptions = <
  TData = Awaited<ReturnType<typeof getOrders>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOrdersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrders>>> = ({
    signal,
  }) => getOrders({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type GetOrdersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOrders>>
>;
export type GetOrdersQueryError = AxiosError<unknown>;

export const useGetOrders = <
  TData = Awaited<ReturnType<typeof getOrders>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetOrdersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postOrders = (
  order: Order,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(`/orders`, order, options);
};

export const getPostOrdersMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postOrders>>,
    TError,
    { data: Order },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postOrders>>,
  TError,
  { data: Order },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postOrders>>,
    { data: Order }
  > = (props) => {
    const { data } = props ?? {};

    return postOrders(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostOrdersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postOrders>>
>;
export type PostOrdersMutationBody = Order;
export type PostOrdersMutationError = AxiosError<unknown>;

export const usePostOrders = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postOrders>>,
    TError,
    { data: Order },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPostOrdersMutationOptions(options);

  return useMutation(mutationOptions);
};
